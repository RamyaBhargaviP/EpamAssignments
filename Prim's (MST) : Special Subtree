import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
class PriorityQueueComparator implements Comparator<Node>{
    public int compare(Node a,Node b)
    {
        return a.weight-b.weight;
    }
}
class Node{
    int val;
    int weight;
    public Node(int d,int w)
    {
    
        val=d;
        weight=w;
    }
}
public class Solution {
    static int prims(int n, int[][] edges, int start) {
        ArrayList<ArrayList<Node>> al=new ArrayList<ArrayList<Node>>();
            for(int i=0;i<=n;i++)
                ar.add(i,new ArrayList<Node>());
             for(int i=0;i<edges.length;i++)
             {
                    int src=edges[i][0];
                    int des=edges[i][1];
                    int wt=edges[i][2];
                    al.get(src).add(new Node(des,wt));
                    al.get(des).add(new Node(src,wt));
             }
             boolean vis[]=new boolean[n+1];
             int value=n;
             int total=0;
             PriorityQueue<Node> pq=new PriorityQueue<Node>(new PriorityQueueComparator());
             pq.add(new Node(start,0));
             while(pq.size()>0 && value>0)
             {
                 Node x=pq.poll();
                 if(!vis[x.value])
                 {
                     vis[x.value]=true;
                     value-=1;
                     total+=x.weight;
                    for(int i=0;i<al.get(x.value).size();i++)
                    {
                         Node p=al.get(x.value).get(i);
                         if(!vis[p.value])
                            pq.add(p);
                     }
                 }
             }
             return total;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[][] edges = new int[m][3];

        for (int i = 0; i < m; i++) {
            String[] edgesRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 3; j++) {
                int edgesItem = Integer.parseInt(edgesRowItems[j]);
                edges[i][j] = edgesItem;
            }
        }

        int start = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int result = prims(n, edges, start);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
